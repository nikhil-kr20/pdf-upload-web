<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cloud Notes - Your Notes, Everywhere</title>
    <link rel="stylesheet" href="/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="preload" href="hero.png" as="image" type="image/png">
    <style>
        .email-input-container {
            position: relative;
        }
       
        
        .btn-send-otp {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 6px 12px;
            font-size: 0.8rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .btn-send-otp:disabled {
            background: #e5e7eb;
            color: #9ca3af;
            cursor: not-allowed;
        }
        
        .btn-send-otp:not(:disabled):hover {
            transform: translateY(-50%) scale(1.05);
            box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
        }
        
        .otp-section {
            margin: 15px 0;
            animation: fadeIn 0.3s ease;
        }
        
        .otp-input-container {
            display: flex;
            gap: 10px;
            margin: 10px 0;
        }
        
        .otp-input {
            width: 40px;
            height: 50px;
            text-align: center;
            font-size: 20px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .otp-input:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
            outline: none;
        }
        
        .otp-actions {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-top: 10px;
        }
        
        .btn-verify-otp {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .btn-verify-otp:disabled {
            background: #e5e7eb;
            color: #9ca3af;
            cursor: not-allowed;
        }
        
        .btn-verify-otp:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }
        
        .otp-timer {
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 14px;
            color: #64748b;
        }
        
        .otp-timer-text {
            font-family: monospace;
            color: #ef4444;
            font-weight: 600;
        }
        
        .btn-resend-otp {
            background: none;
            border: none;
            color: #3b82f6;
            font-size: 0.85rem;
            font-weight: 500;
            cursor: pointer;
            text-decoration: underline;
            padding: 0;
            margin-left: 10px;
        }
        
        .btn-resend-otp:disabled {
            color: #9ca3af;
            cursor: not-allowed;
            text-decoration: none;
        }
        
        .btn-resend-otp:not(:disabled):hover {
            color: #2563eb;
            text-decoration: none;
        }
        
        .otp-status {
            margin-top: 10px;
            font-size: 14px;
            color: #64748b;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Form validation styles */
        input:invalid {
            box-shadow: none; /* Remove default red outline */
        }
        
        /* Hide the browser's default validation message */
        input:invalid:focus {
            outline: none;
        }
        
        /* Style for invalid fields (optional) */
        .form-group.invalid input {
            border-color: #EF4444;
        }
        
        .form-group .error-message {
            color: #EF4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }
        
        .form-group.invalid .error-message {
            display: block;
        }
        
        /* Auth Modal Buttons */
        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: #f3f4f6;
            border-radius: 12px;
            padding: 6px;
        }
        
        .auth-tab {
            flex: 1;
            padding: 12px 20px;
            border: none;
            background: transparent;
            font-size: 1rem;
            font-weight: 600;
            color: #6b7280;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .auth-tab.active {
            background: white;
            color: #3b82f6;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .auth-tab:hover:not(.active) {
            background: rgba(255, 255, 255, 0.5);
            color: #4b5563;
        }
        
        .auth-form .btn {
            width: 100%;
            padding: 14px 24px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .auth-form .btn-primary {
            background: linear-gradient(135deg, #4f46e5, #4338ca);
            color: white;
            box-shadow: 0 4px 14px rgba(79, 70, 229, 0.3);
        }
        
        .auth-form .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(79, 70, 229, 0.4);
            background: linear-gradient(135deg, #4338ca, #3730a3);
        }
        
        .auth-form .btn-secondary {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            box-shadow: 0 4px 14px rgba(59, 130, 246, 0.3);
        }
        
        .auth-form .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
        }
        /* Allow auth buttons to shrink inside flex rows */
        .auth-form .btn { min-width: 0; }
        /* Ghost button variant for subtle actions */
        .btn-ghost {
            background: transparent;
            color: #1f2937;
            border: 2px solid rgba(99, 102, 241, 0.25);
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.08);
        }
        .btn-ghost:hover {
            background: linear-gradient(135deg, rgba(99,102,241,0.08), rgba(99,102,241,0.14));
            border-color: rgba(99, 102, 241, 0.45);
            transform: translateY(-2px);
            box-shadow: 0 8px 18px rgba(99, 102, 241, 0.22);
        }
        .forgot-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            white-space: nowrap;
            font-size: 0.9rem;
            padding: 10px 14px;
            line-height: 1.1;
            letter-spacing: 0.2px;
            font-weight: 600;
            overflow: visible;
            flex: 0 0 auto;
        }
        .forgot-btn .label { overflow: visible; text-overflow: clip; }
        /* Slightly smaller font for Sign In button only */
        #loginForm .btn.btn-secondary { font-size: 0.9rem; padding: 12px 20px; }
        @media (max-width: 480px){
            .auth-form .btn-secondary { width: 100%; }
            .forgot-btn { width: 100%; white-space: normal; text-align: center; }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <div class="logo-icon">
                <img src="logo1.png" alt="CloudNotes Logo" style="height: 120px;">
            </div>
                <div class="logo-text">
                    <span class="logo-primary"  >Cloud Notes</span>
                    
                </div>
            </div>
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="#home" class="nav-link">Home</a>
                </li>
                <li class="nav-item">
                    <a href="#upload" class="nav-link">Upload</a>
                </li>
                <li class="nav-item">
                    <a href="/read" class="nav-link">Browse</a>
                </li>
                <li class="nav-item">
                    <a href="#about" class="nav-link">About</a>
                </li>
            </ul>
            <div class="nav-auth">
                <% if (user) { %>
                    <div class="nav-profile">
                        <a href="/profile" class="profile-link" title="Profile">
                            <span class="avatar"><%= (user.name || user.username || 'U').charAt(0).toUpperCase() %></span>
                            <span class="profile-name"><%= user.name || user.username %></span>
                        </a>
                        <form action="/logout" method="POST" style="display:inline">
                            <button type="submit" class="btn-auth btn-signin">Logout</button>
                        </form>
                    </div>
                <% } else { %>
                    <button id="btnSignIn" class="btn-auth btn-signin" onclick="openAuthModal('login')">Sign In</button>
                    <button id="btnSignUp" class="btn-auth btn-signup" onclick="openAuthModal('signup')">Sign Up</button>
                <% } %>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <section id="home" class="hero">
        <div class="hero-container">
            <div class="hero-content">
                <h1 class="hero-title">Your Academic Resource Hub</h1>
                <p class="hero-subtitle">From lecture notes to exam prep material – everything you need for your college studies in one place.</p>
                
                <div class="action-buttons">
                    <div class="action-card">
                        <h3>Upload Notes</h3>
                        <p>Share your academic notes with the community</p>
                        <button class="btn btn-primary" onclick="if(window.isLoggedIn){scrollToUpload()}else{showNotification('Please sign in to upload notes','warning');openAuthModal('login')}">
                            <span class="btn-icon">📤</span>
                            Upload Notes
                        </button>
                    </div>
                    
                    <div class="action-card">
                        <h3>Browse Notes</h3>
                        <p>Discover notes from students worldwide</p>
                        <button class="btn btn-secondary" onclick="browseNotes()">
                            <span class="btn-icon">🔍</span>
                            Browse Notes
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="hero-visual">
                <div class="floating-elements">
                    <div class="floating-note note-1">📝</div>
                    <div class="floating-note note-2">📊</div>
                    <div class="floating-note note-3">📈</div>
                    <div class="floating-note note-4">🎯</div>
                </div>
            </div>
        </div>
    </section>

    <!-- Auth Modal -->
    <div id="authModal" class="auth-modal-overlay" style="display:none">
        <div class="auth-modal" role="dialog" aria-modal="true" aria-labelledby="authTitle">
            <button class="auth-close" id="authClose" aria-label="Close">×</button>
            <div class="auth-header">
                <h3 id="authTitle">Welcome to Cloud Notes</h3>
                <p class="auth-subtitle">Sign in or create an account to continue</p>
            </div>
            <div class="auth-tabs">
                <button id="authTabLogin" class="auth-tab active" type="button">Login</button>
                <button id="authTabSignup" class="auth-tab" type="button">Sign Up</button>
            </div>
            <div class="auth-body">
                <form id="loginForm" class="auth-form">
                    <div class="form-group">
                        <label for="login-username">Email</label>
                        <input id="login-username" name="username" type="email" required>
                    </div>
                    <div class="form-group">
                        <label for="login-password">Password</label>
                        <input id="login-password" name="password" type="password" required>
                    </div>
                    <div class="auth-btn-row">
                        <button type="submit" class="btn btn-secondary" style="flex:1">Sign In</button>
                        <button type="button" id="btnForgot" class="btn btn-ghost forgot-btn" style="flex:1">
                            <span class="label">Forgot Password?</span>
                        </button>
                    </div>
                </form>
                <form id="signupForm" class="auth-form" style="display:none">
                    <div class="form-group">
                        <label for="signup-name">Full Name</label>
                        <input id="signup-name" name="name" type="text" required>
                    </div>
                    <div class="form-group">
                        <label for="signup-username">Email</label>
                        <div class="email-input-container">
                            <input id="signup-username" name="username" type="email" required>
                            <button type="button" id="sendOtpBtn" class="btn-send-otp" disabled>Send OTP</button>
                        </div>
                    </div>
                    <div id="otpSection" class="otp-section" style="display: none;">
                        <div class="form-group">
                            <label>Enter OTP</label>
                            <div class="otp-input-container">
                                <input type="text" id="otp1" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                                <input type="text" id="otp2" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                                <input type="text" id="otp3" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                                <input type="text" id="otp4" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                                <input type="text" id="otp5" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                                <input type="text" id="otp6" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                            </div>
                            <div class="otp-actions">
                                <button type="button" id="verifyOtpBtn" class="btn-verify-otp" disabled>Verify OTP</button>
                                <div class="otp-timer">
                                    <span id="otpTimer" class="otp-timer-text">02:00</span>
                                    <button type="button" id="resendOtpBtn" class="btn-resend-otp" disabled>Resend OTP</button>
                                </div>
                            </div>
                            <div id="otpStatus" class="otp-status"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="signup-password">Password</label>
                        <input id="signup-password" name="password" type="password" required>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width:100%" id="signupSubmitBtn" disabled>Create Account</button>
                </form>
                <div id="authError" class="auth-error" style="display:none"></div>
            </div>
        </div>
    </div>

    <!-- Forgot Password Modal -->
    <div id="resetModal" class="auth-modal-overlay" style="display:none">
        <div class="auth-modal" role="dialog" aria-modal="true" aria-labelledby="resetTitle">
            <button class="auth-close" id="resetClose" aria-label="Close">×</button>
            <div class="auth-header">
                <h3 id="resetTitle">Reset your password</h3>
                <p class="auth-subtitle">We will send a 6-digit code to your email</p>
            </div>
            <div class="auth-body">
                <form id="resetFormEmail" class="auth-form">
                    <div class="form-group">
                        <label for="reset-email">Email</label>
                        <input id="reset-email" type="email" required>
                    </div>
                    <button type="submit" id="resetSendBtn" class="btn btn-primary">Send Code</button>
                </form>
                <form id="resetFormVerify" class="auth-form" style="display:none">
                    <div class="form-group">
                        <label for="reset-otp">Enter 6-digit code</label>
                        <div class="otp-input-container">
                            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]">
                            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]">
                            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]">
                            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]">
                            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]">
                            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]">
                        </div>
                    </div>
                    <div class="otp-actions">
                        <button type="button" id="resetResendBtn" class="btn-resend-otp" disabled>Resend code</button>
                        <span id="resetTimer" class="otp-timer-text">02:00</span>
                    </div>
                    <button type="submit" id="resetVerifyBtn" class="btn btn-secondary" disabled>Verify Code</button>
                </form>
                <form id="resetFormPassword" class="auth-form" style="display:none">
                    <div class="form-group">
                        <label for="reset-newpass">New Password</label>
                        <input id="reset-newpass" type="password" minlength="6" required>
                    </div>
                    <div class="form-group">
                        <label for="reset-confirmpass">Confirm Password</label>
                        <input id="reset-confirmpass" type="password" minlength="6" required>
                    </div>
                    <button type="submit" id="resetConfirmBtn" class="btn btn-primary">Update Password</button>
                </form>
                <div id="resetStatus" class="otp-status"></div>
            </div>
        </div>
    </div>

    <!-- Upload Section -->
    <section id="upload" class="upload-section">
        <div class="upload-container">
            <div class="upload-form">
                <h2>Upload Your PDF Notes</h2>
                <p>Share your academic resources with the community and help fellow students succeed.</p>
                
                <!-- Fancy Upload Form -->
                <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="title">Note Title</label>
                        <input type="text" id="title" name="title" placeholder="Enter a descriptive title for your notes" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="file">Select PDF File</label>
                        <div class="file-input-wrapper">
                            <input type="file" id="file" name="file" accept=".pdf" required>
                            <label for="file" class="file-input-label">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <span>Choose PDF file or drag and drop here</span>
                            </label>
                        </div>
                    </div>
                    
                    <button id="uploadSubmitBtn" type="submit" class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
                        <span class="btn-icon">📤</span>
                        Upload PDF Notes
                    </button>
                </form>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="features">
        <div class="container">
            <div class="section-header">
                <h2>Why Choose Cloud Notes?</h2>
                <p>Discover the features that make us the ultimate academic companion</p>
            </div>
            
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">🚀</div>
                    <h3>Instant Access</h3>
                    <p>Access your notes from any device, anywhere, anytime. No more forgotten notebooks!</p>
                    <div class="feature-stats">
                        <span>99.9%</span>
                        <small>Uptime</small>
                    </div>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">🔒</div>
                    <h3>Secure & Private</h3>
                    <p>Bank-level encryption keeps your academic work safe and confidential.</p>
                    <div class="feature-stats">
                        <span>256-bit</span>
                        <small>Encryption</small>
                    </div>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">🤝</div>
                    <h3>Collaborate</h3>
                    <p>Share notes with classmates, create study groups, and learn together.</p>
                    <div class="feature-stats">
                        <span>100+</span>
                        <small>Students</small>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- How It Works Section -->
    <section class="how-it-works">
        <div class="container">
            <div class="section-header">
                <h2>How It Works</h2>
                <p>Get started in just 3 simple steps</p>
            </div>
            
            <div class="steps-container">
                <div class="step-item">
                    <div class="step-number">1</div>
                    <div class="step-icon">📝</div>
                    <h3>Create Account</h3>
                    <p>Sign up with your student email and start your academic journey</p>
                </div>
                
                <div class="step-connector"></div>
                
                <div class="step-item">
                    <div class="step-number">2</div>
                    <div class="step-icon">📤</div>
                    <h3>Upload Notes</h3>
                    <p>Share your lecture notes, study guides, and exam materials</p>
                </div>
                
                <div class="step-connector"></div>
                
                <div class="step-item">
                    <div class="step-number">3</div>
                    <div class="step-icon">🎯</div>
                    <h3>Study & Succeed</h3>
                    <p>Access comprehensive resources and ace your exams</p>
                </div>
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section id="about" class="about">
        <div class="container">
            <div class="about-content">
                <div class="about-text">
                    <h2>Empowering Students Worldwide</h2>
                    <p>Cloud Notes is more than just a note-taking platform. We're building the world's largest academic community where knowledge flows freely and learning becomes collaborative.</p>
                    <div class="about-features">
                        <div class="about-feature">
                            <span class="feature-check">✓</span>
                            <span>Free for all students</span>
                        </div>
                        <div class="about-feature">
                            <span class="feature-check">✓</span>
                            <span>Cross-platform compatibility</span>
                        </div>
                        <div class="about-feature">
                            <span class="feature-check">✓</span>
                            <span>24/7 customer support</span>
                        </div>
                    </div>
                </div>
                <div class="about-visual">
                    <div class="floating-icons">
                        <div class="floating-icon">📚</div>
                        <div class="floating-icon">💻</div>
                        <div class="floating-icon">🎓</div>
                        <div class="floating-icon">🚀</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <!-- Contact Section -->
    <section id="contact" class="contact-section">
        <div class="contact-container">
            <div class="contact-card">
                <div class="contact-header">
                    <h2>Get in Touch</h2>
                    <p>Have questions or feedback? We'd love to hear from you!</p>
                </div>
                
                <div class="contact-content">
                    <% if (typeof user === 'undefined' || !user) { %>
                        <div class="login-prompt">
                            <i class="fas fa-info-circle"></i>
                            <p>Please <a href="/login?redirect=/#contact" class="login-link">login</a> to send us a message.</p>
                        </div>
                    <% } else { %>
                        <form class="contact-form" action="/send-feedback" method="post" id="feedbackForm">
                            <div class="form-group">
                                <label for="feedbackMessage">Your Message</label>
                                <textarea name="message" id="feedbackMessage" placeholder="Type your message here..." rows="7" required></textarea>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn-send">
                                    <i class="fas fa-paper-plane"></i> Send Message
                                </button>
                            </div>
                        </form>
                    <% } %>
                </div>
            </div>
        </div>
    </section>

    <style>
        .contact-section {
            padding: 80px 0;
            background: linear-gradient(135deg, #f0f7ff 0%, #e1f0ff 100%);
            min-height: 70vh;
            display: flex;
            align-items: center;
        }
        
        .contact-container {
            max-width: 700px;
            width: 90%;
            margin: 0 auto;
        }
        
        .contact-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            padding: 40px;
            position: relative;
            z-index: 1;
        }
        
        .contact-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 8px;
            background: linear-gradient(90deg, #1e40af, #3b82f6);
        }
        
        .contact-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .contact-header h2 {
            color: #1e40af;
            font-size: 2.2rem;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .contact-header p {
            color: #4b5563;
            font-size: 1.05rem;
            line-height: 1.6;
        }
        
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            background: white;
        }
        
        .btn-send {
            background: linear-gradient(135deg, #3b82f6, #1e40af);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .btn-send:hover {
            background: linear-gradient(135deg, #1e40af, #1e3a8a);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(30, 64, 175, 0.3);
        }
        
        .login-prompt {
            background: #f0f7ff;
            border: 1px solid #dbeafe;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .login-prompt i {
            color: #3b82f6;
            font-size: 2rem;
            margin-bottom: 10px;
            display: block;
        }
        
        .login-prompt p {
            color: #4b5563;
            margin: 0;
        }
        
        .login-link {
            color: #3b82f6;
            font-weight: 600;
            text-decoration: none;
            transition: color 0.2s;
        }
        
        .login-link:hover {
            color: #1e40af;
            text-decoration: underline;
        }
        
        @media (max-width: 768px) {
            .contact-card {
                padding: 30px 25px;
            }
            
            .contact-header h2 {
                font-size: 1.8rem;
            }
            
            .btn-send {
                width: 100%;
                justify-content: center;
                padding: 15px 20px;
            }
        }
        
        @media (max-width: 480px) {
            .contact-section {
                padding: 50px 0;
            }
            
            .contact-card {
                padding: 25px 20px;
                border-radius: 12px;
            }
            
            .contact-header h2 {
                font-size: 1.6rem;
            }
            
            .contact-header p {
                font-size: 1rem;
            }
        }
    </style>
    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 Cloud Notes. All rights reserved.</p>
        </div>
    </footer>

<script>
    // Expose server auth state for optional client checks
    window.isLoggedIn = <%= JSON.stringify(!!user) %>;
</script>

    <script src="/script.js?v=<%= Date.now() %>"></script>
    <script>
        // Additional functions for this page
        function scrollToUpload() {
            document.getElementById('upload').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
        
        function browseNotes() {
            window.location.href = '/read';
        }
        // Auto-open auth modal if redirected here with auth query
        (function(){
            try {
                var params = new URLSearchParams(window.location.search);
                var auth = params.get('auth');
                if (auth === 'login' || auth === 'signup') {
                    openAuthModal(auth);
                    // Clean the URL without reloading
                    params.delete('auth');
                    var newUrl = window.location.pathname + (params.toString() ? ('?' + params.toString()) : '');
                    window.history.replaceState({}, '', newUrl);
                }
            } catch (e) {}
        })();
        // Fallback wiring for auth modal open
        document.addEventListener('DOMContentLoaded', function() {
            var authModal = document.getElementById('authModal');
            var btnSignIn = document.getElementById('btnSignIn');
            var btnSignUp = document.getElementById('btnSignUp');
            var tabLogin = document.getElementById('authTabLogin');
            var tabSignup = document.getElementById('authTabSignup');
            var loginForm = document.getElementById('loginForm');
            var signupForm = document.getElementById('signupForm');

            function switchAuthTab(which) {
                if (!tabLogin || !tabSignup || !loginForm || !signupForm) return;
                if (which === 'signup') {
                    tabSignup.classList.add('active');
                    tabLogin.classList.remove('active');
                    signupForm.style.display = '';
                    loginForm.style.display = 'none';
                } else {
                    tabLogin.classList.add('active');
                    tabSignup.classList.remove('active');
                    loginForm.style.display = '';
                    signupForm.style.display = 'none';
                }
            }

            if (btnSignIn) btnSignIn.addEventListener('click', function() { openAuthModal('login'); });
            if (btnSignUp) btnSignUp.addEventListener('click', function() { openAuthModal('signup'); });
        });

        // Global helper used by inline onclick on nav buttons
        function openAuthModal(which) {
            var authModal = document.getElementById('authModal');
            var tabLogin = document.getElementById('authTabLogin');
            var tabSignup = document.getElementById('authTabSignup');
            var loginForm = document.getElementById('loginForm');
            var signupForm = document.getElementById('signupForm');
            if (!authModal) return;
            function switchAuthTab(w){
                if (!tabLogin || !tabSignup || !loginForm || !signupForm) return;
                if (w === 'signup') {
                    tabSignup.classList.add('active');
                    tabLogin.classList.remove('active');
                    signupForm.style.display = '';
                    loginForm.style.display = 'none';
                } else {
                    tabLogin.classList.add('active');
                    tabSignup.classList.remove('active');
                    loginForm.style.display = '';
                    signupForm.style.display = 'none';
                }
            }
            authModal.style.display = 'flex';
            requestAnimationFrame(function(){ authModal.classList.add('show'); });
            switchAuthTab(which || 'login');
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const signupForm = document.getElementById('signupForm');
            const emailInput = document.getElementById('signup-username');
            const sendOtpBtn = document.getElementById('sendOtpBtn');
            const otpSection = document.getElementById('otpSection');
            const otpInputs = document.querySelectorAll('.otp-input');
            const otpTimer = document.getElementById('otpTimer');
            const resendOtpBtn = document.getElementById('resendOtpBtn');
            const signupSubmitBtn = document.getElementById('signupSubmitBtn');
            const nameInput = document.getElementById('signup-name');
            const passwordInput = document.getElementById('signup-password');
            const verifyOtpBtn = document.getElementById('verifyOtpBtn');
            
            let otpTimerInterval;
            let timeLeft = 120; // 2 minutes in seconds
            let currentEmail = '';
            
            // Email validation
            emailInput.addEventListener('input', function() {
                const email = this.value.trim();
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                sendOtpBtn.disabled = !emailRegex.test(email);
                
                // If email changes, hide OTP section and reset state
                if (email !== currentEmail && otpSection.style.display === 'block') {
                    otpSection.style.display = 'none';
                    clearInterval(otpTimerInterval);
                    sendOtpBtn.disabled = !emailRegex.test(email);
                    emailInput.disabled = false;
                    resetOtpInputs();
                }
                
                currentEmail = email;
            });
            
            // Send OTP button click handler
            sendOtpBtn.addEventListener('click', async function() {
                const email = emailInput.value.trim();
                
                // Disable button and show loading state
                sendOtpBtn.disabled = true;
                sendOtpBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
                
                try {
                    const response = await fetch('/api/send-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email })
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to send OTP');
                    }
                    
                    // Show OTP section
                    otpSection.style.display = 'block';
                    
                    // Start the OTP timer
                    startOtpTimer();
                    
                    // Keep email editable; only guard send button while loading or invalid
                    sendOtpBtn.disabled = true;
                    
                    // Focus on first OTP input
                    setTimeout(() => {
                        document.getElementById('otp1').focus();
                    }, 100);
                    
                    showNotification('OTP sent successfully', 'success');
                } catch (error) {
                    console.error('Error:', error);
                    const msg = (error && error.message) ? error.message : '';
                    if (/already\s*(registered|exists)/i.test(msg)) {
                        showNotification('Email already registered', 'error');
                    } else {
                        showNotification('Failed to send OTP', 'error');
                    }
                    sendOtpBtn.disabled = false;
                } finally {
                    sendOtpBtn.innerHTML = 'Send OTP';
                }
            });
            
            // OTP input handling
            otpInputs.forEach((input, index) => {
                // Handle input
                input.addEventListener('input', function(e) {
                    if (this.value.length === 1) {
                        if (index < otpInputs.length - 1) {
                            otpInputs[index + 1].focus();
                        } else {
                            this.blur();
                        }
                        validateOtp();
                    }
                });
                
                // Handle backspace
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Backspace' && this.value === '' && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });
                
                // Handle paste
                input.addEventListener('paste', function(e) {
                    e.preventDefault();
                    const pasteData = e.clipboardData.getData('text').trim();
                    if (/^\d+$/.test(pasteData)) {
                        const digits = pasteData.split('');
                        otpInputs.forEach((input, i) => {
                            if (i < digits.length) {
                                input.value = digits[i];
                            }
                        });
                        if (digits.length >= otpInputs.length) {
                            document.activeElement.blur();
                        } else if (digits.length < otpInputs.length) {
                            otpInputs[digits.length].focus();
                        }
                        validateOtp();
                    }
                });
            });
            
            // Resend OTP button click handler
            resendOtpBtn.addEventListener('click', async function() {
                const email = emailInput.value.trim();
                
                // Disable button and show loading state
                resendOtpBtn.disabled = true;
                resendOtpBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
                
                try {
                    const response = await fetch('/api/send-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email })
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to resend OTP');
                    }
                    
                    // Reset OTP inputs
                    resetOtpInputs();
                    document.getElementById('otp1').focus();
                    
                    // Reset and restart timer
                    clearInterval(otpTimerInterval);
                    timeLeft = 120;
                    updateOtpTimer();
                    startOtpTimer();
                    
                    showNotification('OTP sent successfully', 'success');
                } catch (error) {
                    console.error('Error:', error);
                    showNotification(error.message || 'Failed to resend OTP', 'error');
                    resendOtpBtn.disabled = false;
                } finally {
                    resendOtpBtn.innerHTML = 'Resend OTP';
                }
            });
            
            // Verify OTP button click handler
            verifyOtpBtn.addEventListener('click', async function() {
                const email = emailInput.value.trim();
                let otp = '';
                otpInputs.forEach(input => {
                    otp += input.value;
                });
                
                if (otp.length !== 6) {
                    showNotification('Please enter a 6-digit OTP', 'error');
                    return;
                }
                
                // Disable button and show loading state
                verifyOtpBtn.disabled = true;
                verifyOtpBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Verifying...';
                
                try {
                    const response = await fetch('/api/verify-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email, otp })
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.message || 'OTP verification failed');
                    }
                    
                    // Store verification status in sessionStorage
                    sessionStorage.setItem(`otp_verified_${email}`, 'true');
                    
                    // Enable form fields
                    nameInput.disabled = false;
                    passwordInput.disabled = false;
                    signupSubmitBtn.disabled = false;
                    
                    // Show success message
                    showNotification('OTP verified successfully', 'success');
                    
                } catch (error) {
                    console.error('Error:', error);
                    const msg = (error && error.message) ? error.message : '';
                    if (/invalid\s*otp/i.test(msg)) {
                        showNotification('Invalid OTP, please retry', 'error');
                    } else {
                        showNotification(msg || 'OTP verification failed', 'error');
                    }
                    verifyOtpBtn.disabled = false;
                } finally {
                    verifyOtpBtn.innerHTML = 'Verify OTP';
                }
            });
            
            // Form submission
            signupForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const name = nameInput.value.trim();
                const email = emailInput.value.trim();
                const password = passwordInput.value;
                
                // Basic validation
                if (!name || !email || !password) {
                    showNotification('All fields are required', 'error');
                    return;
                }
                
                // Show loading state
                const submitBtn = signupForm.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating Account...';
                
                try {
                    // Prepare form data
                    const formData = new URLSearchParams();
                    formData.append('name', name);
                    formData.append('username', email); // Using username field for email
                    formData.append('password', password);
                    
                    const response = await fetch('/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: formData
                    });
                    const text = await response.text();
                    if (!response.ok) {
                        if (response.status === 409 || /already\s*(exists|registered|in use)/i.test(text)) {
                            throw new Error('Email already registered');
                        }
                        throw new Error(text || 'Registration failed');
                    }
                    showNotification('Account created successfully!', 'success');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 1000);
                } catch (error) {
                    console.error('Error:', error);
                    showNotification(error.message === 'Email already registered' ? 'Email already registered' : (error.message || 'Registration failed. Please try again.'), 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                }
            });
            
            function startOtpTimer() {
                updateOtpTimer();
                otpTimerInterval = setInterval(updateOtpTimer, 1000);
            }
            
            function updateOtpTimer() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                otpTimer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                if (timeLeft <= 0) {
                    clearInterval(otpTimerInterval);
                    resendOtpBtn.disabled = false;
                    otpTimer.textContent = '00:00';
                } else {
                    timeLeft--;
                }
            }
            
            function validateOtp() {
                let otp = '';
                otpInputs.forEach(input => {
                    otp += input.value;
                });
                
                // Enable verify button only if OTP is 6 digits
                verifyOtpBtn.disabled = otp.length !== 6;
            }
            
            function resetOtpInputs() {
                otpInputs.forEach(input => {
                    input.value = '';
                });
                verifyOtpBtn.disabled = true;
            }
            
            function showNotification(message, type = 'info') {
                if (typeof window.showNotification === 'function') {
                    window.showNotification(message, type);
                } else {
                    try { console.warn('Global showNotification not found; using alert fallback'); } catch (e) {}
                    alert(message);
                }
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const feedbackForm = document.getElementById('feedbackForm');
            const feedbackMessage = document.getElementById('feedbackMessage');
            
            // Check for URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const feedbackStatus = urlParams.get('feedback');
            const feedbackMsg = urlParams.get('message');
            
            // Show feedback message if any
            if (feedbackStatus === 'error' && feedbackMsg) {
                showNotification(feedbackMsg, 'error');
            } else if (feedbackStatus === 'success') {
                showNotification('Thank you for your feedback!', 'success');
            }
            
            // Handle form submission
            if (feedbackForm) {
                feedbackForm.addEventListener('submit', function(e) {
                    const message = feedbackMessage.value.trim();
                    if (!message) {
                        e.preventDefault();
                        showNotification('Please enter a message', 'error');
                    }
                });
            }
        });
    </script>
</body>
</html>